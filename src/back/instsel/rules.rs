// AUTOGENERATED CODE! DO NOT EDIT!
use back::machine::asm;
use back::machine::cconv;
use back::machine::{self, MachineRegister};
use driver::interner::Ident;
use middle::ir;

#[derive(Debug)]
enum IrLine<'a> {
    Instruction(&'a ir::Instruction),
    CFInstruction(&'a ir::ControlFlowInstruction),
}

#[allow(non_shorthand_field_patterns)]
#[allow(match_same_arms)]
#[allow(unused_variables)]
pub fn trans_instr(
    instr: &[&ir::Instruction],
    last: &ir::ControlFlowInstruction,
    code: &mut asm::Block,
) -> (usize, bool) {
    let mut lines: Vec<_> = instr.iter().map(|i| IrLine::Instruction(i)).collect();
    lines.push(IrLine::CFInstruction(last));

    match *lines {
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Add,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("add"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Add,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("add"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Add,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("add"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Add,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("add"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Sub,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sub"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Sub,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sub"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Sub,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sub"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Sub,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sub"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mul,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("imul"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mul,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("imul"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mul,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("imul"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mul,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("imul"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Div,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(rhs))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Div,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            let tmp = Ident::from_str("tmp");
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(tmp))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Div,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(rhs))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Div,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            let tmp = Ident::from_str("tmp");
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(tmp))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mod,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(rhs))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mod,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            let tmp = Ident::from_str("tmp");
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(tmp))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mod,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(rhs))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Mod,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            let tmp = Ident::from_str("tmp");
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("idiv"),
                vec![asm::Argument::Register(asm::Register::Virtual(tmp))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RDX)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shl,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RCX)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sal"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shl,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sal"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shl,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RCX)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sal"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shl,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sal"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shr,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RCX)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sar"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shr,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sar"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shr,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RCX)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sar"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Shr,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sar"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::And,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::And,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::And,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::And,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Or,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("or"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Or,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("or"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Or,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("or"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Or,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("or"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Xor,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Xor,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Xor,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::BinOp {
            op: ir::InfixOp::Xor,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("xor"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::UnOp {
            op: ir::PrefixOp::Neg,
            item: ir::Value::Register(ir::Register::Local(item)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(item)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("neg"),
                vec![asm::Argument::Register(asm::Register::Virtual(dst))],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::UnOp {
            op: ir::PrefixOp::Neg,
            item: ir::Value::Immediate(ir::Immediate(item)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(item)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("neg"),
                vec![asm::Argument::Register(asm::Register::Virtual(dst))],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::UnOp {
            op: ir::PrefixOp::Not,
            item: ir::Value::Register(ir::Register::Local(item)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(item)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("not"),
                vec![asm::Argument::Register(asm::Register::Virtual(dst))],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::UnOp {
            op: ir::PrefixOp::Not,
            item: ir::Value::Immediate(ir::Immediate(item)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(item)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("not"),
                vec![asm::Argument::Register(asm::Register::Virtual(dst))],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jl"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jl"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jge"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setl"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setl"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Lt,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setge"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jle"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jle"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jg"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setle"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setle"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Le,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setg"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jge"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jge"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jl"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setge"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setge"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ge,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setl"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jg"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jg"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jle"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setg"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setg"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Gt,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setle"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("je"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("je"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jne"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sete"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sete"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Eq,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setne"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jne"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jne"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] if dst == cond =>
        {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("je"),
                vec![asm::Argument::Label(altern)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(conseq)],
            ));
            (1, true)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setne"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Register(ir::Register::Local(lhs)),
            rhs: ir::Value::Immediate(ir::Immediate(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(lhs)),
                    asm::Argument::Immediate(machine::Word::from(rhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("setne"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Cmp {
            cmp: ir::CmpOp::Ne,
            lhs: ir::Value::Immediate(ir::Immediate(lhs)),
            rhs: ir::Value::Register(ir::Register::Local(rhs)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("cmp"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(rhs)),
                    asm::Argument::Immediate(machine::Word::from(lhs)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("sete"),
                vec![asm::Argument::Register(asm::Register::Machine(
                    MachineRegister::CL,
                ))],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("and"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("movzx"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::CL)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Alloca {
            dst: ir::Register::Stack(dst),
        }), _..] => (1, false),
        [IrLine::Instruction(&ir::Instruction::Load {
            src: ir::Value::Register(ir::Register::Stack(src)),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::StackSlot(asm::Register::Virtual(src)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Load {
            src: ir::Value::Static(src),
            dst: ir::Register::Local(dst),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::StackSlot(asm::Register::Virtual(src)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Store {
            src: ir::Value::Register(ir::Register::Local(val)),
            dst: ir::Value::Register(ir::Register::Stack(dst)),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::StackSlot(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(val)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Store {
            src: ir::Value::Immediate(ir::Immediate(val)),
            dst: ir::Value::Register(ir::Register::Stack(dst)),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::StackSlot(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(val)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Store {
            src: ir::Value::Register(ir::Register::Local(val)),
            dst: ir::Value::Register(ir::Register::Local(dst)),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Register(asm::Register::Virtual(val)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Store {
            src: ir::Value::Immediate(ir::Immediate(val)),
            dst: ir::Value::Register(ir::Register::Local(dst)),
        }), _..] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(dst)),
                    asm::Argument::Immediate(machine::Word::from(val)),
                ],
            ));
            (1, false)
        }
        [IrLine::Instruction(&ir::Instruction::Call {
            name: callee,
            args: ref args,
            dst: ir::Register::Local(dst),
        }), _..] => {
            // Note: This is Rust code, not assembler
            cconv::translate_call(code, callee, args, dst);
            (1, false)
        }
        [IrLine::CFInstruction(&ir::ControlFlowInstruction::Return { value: None })] => {
            code.emit_instruction(asm::Instruction::new(Ident::from_str("leave"), vec![]));
            code.emit_instruction(asm::Instruction::new(Ident::from_str("ret"), vec![]));
            (0, true)
        }
        [IrLine::CFInstruction(&ir::ControlFlowInstruction::Return {
            value: Some(ir::Value::Register(ir::Register::Local(val))),
        })] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Machine(MachineRegister::RAX)),
                    asm::Argument::Register(asm::Register::Virtual(val)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(Ident::from_str("leave"), vec![]));
            code.emit_instruction(asm::Instruction::new(Ident::from_str("ret"), vec![]));
            (0, true)
        }
        [IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Register(ir::Register::Local(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("test"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(cond)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("je"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (0, true)
        }
        [IrLine::CFInstruction(&ir::ControlFlowInstruction::Branch {
            cond: ir::Value::Immediate(ir::Immediate(cond)),
            conseq: ir::Label(conseq),
            altern: ir::Label(altern),
        })] => {
            let tmp = Ident::from_str("tmp");
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("mov"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(machine::Word::from(cond)),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("test"),
                vec![
                    asm::Argument::Register(asm::Register::Virtual(tmp)),
                    asm::Argument::Immediate(1),
                ],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("je"),
                vec![asm::Argument::Label(conseq)],
            ));
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(altern)],
            ));
            (0, true)
        }
        [IrLine::CFInstruction(&ir::ControlFlowInstruction::Jump {
            dest: ir::Label(target),
        })] => {
            code.emit_instruction(asm::Instruction::new(
                Ident::from_str("jmp"),
                vec![asm::Argument::Label(target)],
            ));
            (0, true)
        }
        _ => {
            println!("instr: {:?}", instr);
            println!("last: {:?}", last);
            println!("lines: {:?}", lines);
            panic!("No rule to translate {:?} to asm", lines)
        }
    }
}
